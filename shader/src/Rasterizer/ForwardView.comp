#version 460

#define RASTERIZER_LOAD_SPLAT
#define RASTERIZER_STORE_SPLAT_VIEW
#define RASTERIZER_STORE_SPLAT_QUAD
#include "Common.glsl"

layout(local_size_x = FORWARD_VIEW_DIM, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = SBUF_SORT_KEYS_BINDING) writeonly buffer bSortKeys { uint gSortKeys[]; };
layout(std430, binding = SBUF_SORT_PAYLOADS_BINDING) writeonly buffer bSortPayloads { uint gSortPayloads[]; };
layout(std430, binding = SBUF_DRAW_ARGS_BINDING) buffer bDrawArgs { uint gDrawArgs[]; };

layout(std430, binding = SBUF_SORT_SPLAT_INDICES_BINDING) writeonly buffer bSortSplatIndices {
	uint gSortSplatIndices[];
};

void main() {
	uint splatIdx = gl_GlobalInvocationID.x;

	if (splatIdx >= gSplatCount)
		return;

	Splat splat = loadSplat(splatIdx);
	Camera camera = loadCamera();

	if (splat.geom.opacity <= ALPHA_MIN)
		return;

	float viewMeanZ;
	if (behindFrustum(splat, camera, viewMeanZ))
		return;

	SplatQuad splatQuad;
	SplatView splatView = splat2splatView(splat, camera, splatQuad);

	if (!inFrustum(splatView.geom, splatQuad, camera))
		return;

	uint sortIdx = atomicAdd(gDrawArgs[1], 1u); // gDrawArgs[1] is InstanceCount
	storeSplatView(sortIdx, splatView);
	storeSplatQuad(sortIdx, splatQuad);

	// viewMeanZ > 0 is guaranteed
	gSortKeys[sortIdx] = floatBitsToUint(viewMeanZ);
	gSortPayloads[sortIdx] = sortIdx;
	gSortSplatIndices[sortIdx] = splatIdx;
}
