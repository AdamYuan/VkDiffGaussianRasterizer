#version 460
#include "Common.glsl"

// 256 * 256 threads
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = B_INDIRECT_ARGS_BINDING) writeonly buffer bIndirectArgs { uint gIndirectArgs[]; };

layout(std430, binding = B_PASS_HISTS_BINDING) writeonly buffer bPassHists {
	uint gPassHists[]; // Size: divCeil(gKeyCount, SORT_PART_SIZE) * RADIX * PASS_COUNT
};

void main() {
	uint threadIdx = gl_GlobalInvocationID.x;

	uint sortGroupCount = getSortPartCount();

	if (threadIdx == 0) {
		gIndirectArgs[0] = divCeil(gKeyCount, GLOBAL_HIST_PART_SIZE);
		gIndirectArgs[3] = sortGroupCount;
	}

	for (uint i = threadIdx, end = sortGroupCount * PASS_COUNT * RADIX; i < end; i += 256 * 256)
		gPassHists[i] = 0;
}
